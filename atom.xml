<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[pybae]]></title>
  <link href="http://pybae.github.io/atom.xml" rel="self"/>
  <link href="http://pybae.github.io/"/>
  <updated>2015-04-27T17:27:13-05:00</updated>
  <id>http://pybae.github.io/</id>
  <author>
    <name><![CDATA[Paul Bae]]></name>
    <email><![CDATA[pbae@utexas.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A simple introduction to Scrapy]]></title>
    <link href="http://pybae.github.io/blog/2015/04/27/a-simple-introduction-to-scrapy/"/>
    <updated>2015-04-27T12:36:39-05:00</updated>
    <id>http://pybae.github.io/blog/2015/04/27/a-simple-introduction-to-scrapy</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p><a href="http://scrapy.org/">Scrapy</a> is a popular web scraper in Python 2.7.8. Python 3 is not officially supported, although there have been movements for this to port the language. In this article, I&rsquo;ll be going through some of the main features of Scrapy and sharing how I used it in <a href="http://freespirits.me">our project</a>. But first, let&rsquo;s define some common terminology used.</p>

<p>A spider (or crawler) refers to the component that navigates thorough a website. For example, one such Spider could be clicking on all possible links from the starting positions of the spider. In Scrapy, we can define Spiders from the lib <code>scrapy.contrib.spiders</code></p>

<p>A parser is used to refer to software that parses some form of data into another. Common examples include a JSON parser, XML parser, and so forth. In this case, we&rsquo;re concerned with HTML parsers. I&rsquo;ll be using <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautiful Soup 4</a> for this tutorial, but it&rsquo;s possible to use whatever parser.</p>

<p>A scraper is a more ambiguous term. Scrapy uses the term to refer to the complete package of scraping tools, including the spider, parser, and a pipelined system. In a more colloquial sense, the word is used to refer to the act of retrieving data from websites. In general, it&rsquo;s best to use tools such as Scrapy for websites that have duplicated pages with similar structure, but different content. For example, Wikipedia would be a good example of a website to scrape. On the other hand, Apple&rsquo;s website would be inefficient to scrape, as each page is largely, if not entirely, different from the other. As an example for this tutorial, I&rsquo;ll be scraping Wikipedia.</p>

<h3>Scrapy</h3>

<p>Let&rsquo;s first initialize a new Scrapy project. This is done as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scrapy startproject wikipedia
</span></code></pre></td></tr></table></div></figure>


<p>This generates a directory of the following structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── scrapy.cfg
</span><span class='line'>└── wikipedia
</span><span class='line'>    ├── __init__.py
</span><span class='line'>    ├── items.py
</span><span class='line'>    ├── pipelines.py
</span><span class='line'>    ├── settings.py
</span><span class='line'>    └── spiders
</span><span class='line'>        └── __init__.py
</span><span class='line'>
</span><span class='line'><span class="m">2</span> directories, <span class="m">6</span> files
</span></code></pre></td></tr></table></div></figure>


<p>The first file we&rsquo;ll take a look at it <code>items.py</code>, which specifies Scrapy classes that represent the items to be scraped.
A sample class could look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># items.py #</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">scrapy</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">WikipediaItem</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Item</span><span class="p">):</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>A Scrapy Item is similar to a C struct. The type of the Scrapy Field is a Python type and we can access the item using the common Python dictionary syntax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">item</span> <span class="o">=</span> <span class="n">WikipediaItem</span><span class="p">()</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">en</span><span class="o">.</span><span class="n">wikipedia</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">wiki</span><span class="o">/</span><span class="n">Cat</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;Cats&quot;</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;description&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;Lots of cats&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s take a look at the more interesting spiders directory.
Note that there is no file created for you by default. Scrapy expects you to create these spiders as separate files, and then they can be invoked by <code>scrapy crawl SPIDER_NAME_HERE</code>. Let&rsquo;s write up a sample spider now.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">scrapy.contrib.spiders</span> <span class="kn">import</span> <span class="n">CrawlSpider</span><span class="p">,</span> <span class="n">Rule</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy.contrib.linkextractors</span> <span class="kn">import</span> <span class="n">LinkExtractor</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">wikipedia.items</span> <span class="kn">import</span> <span class="n">WikipediaItem</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PagesSpider</span><span class="p">(</span><span class="n">CrawlSpider</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    the Page Spider for wikipedia</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;wikipedia_pages&quot;</span>
</span><span class='line'>    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;wikipedia.org&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&quot;https://en.wikipedia.org/wiki/Main_Page&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rules</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">Rule</span><span class="p">(</span><span class="n">LinkExtractor</span><span class="p">(</span><span class="n">allow</span><span class="o">=</span><span class="s">&quot;.+&quot;</span><span class="p">),</span>
</span><span class='line'>             <span class="n">callback</span><span class="o">=</span><span class="s">&#39;parse_wikipedia_page&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse_wikipedia_page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Found a page&quot;</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the class takes in a CrawlSpider as the class parameter. A CrawlSpider simply clicks on all the links on a page, as a web crawler usually does, and verifies each of the link with the rules tuple. The tuple is ordered in terms of significance, meaning that the earlier elements in the tuple are rated higher than the later ones. Each Rule relies on the LinkExtractor class, which is essentially a regex verifying the links.</p>

<p>So, running the spider leads to the following log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Main_Page
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Praetorian_prefect
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Rufinus_<span class="o">(</span>consul<span class="o">)</span>
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Arcadius
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/List_of_Byzantine_emperors
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/F%C3%BCr_Elise
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/1810
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Sultana_<span class="o">(</span>steamboat<span class="o">)</span>
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/1865
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Ludwig_van_Beethoven
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Steamboat
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Mississippi_River
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Aelia_Eudoxia
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/395
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Koningsdag
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Wikipedia:General_disclaimer
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/April_27
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/w/index.php?action<span class="o">=</span><span class="nb">history</span><span class="p">&amp;</span><span class="nv">title</span><span class="o">=</span>Main_Page
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a couple errors with this log output, however.
The first, and more prominent errors, are the links looking like: <code>https:/en.wikipedia.org/w/*</code>. These links are related to the history (and views) of the page source. So, we can safely ignore these page sources. We can modify our LinkExtractor to only include those with /wiki/ links now.</p>

<p>We can do this as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rules</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">Rule</span><span class="p">(</span><span class="n">LinkExtractor</span><span class="p">(</span><span class="n">allow</span><span class="o">=</span><span class="s">&quot;https://en\.wikipedia\.org/wiki/.+&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">callback</span><span class="o">=</span><span class="s">&#39;parse_wikipedia_page&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we want to also include not just /wiki/, but pages that seem to have some content. For example, we&rsquo;d like to avoid the link <code>https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard</code>. Therefore, we can do this by writing a regex as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rules</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">Rule</span><span class="p">(</span><span class="n">LinkExtractor</span><span class="p">(</span><span class="n">allow</span><span class="o">=</span><span class="s">&quot;https://en\.wikipedia\.org/wiki/.+_.+&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">deny</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>                            <span class="s">&quot;https://en\.wikipedia\.org/wiki/Wikipedia.*&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s">&quot;https://en\.wikipedia\.org/wiki/Main_Page&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s">&quot;https://en\.wikipedia\.org/wiki/Free_Content&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s">&quot;https://en\.wikipedia\.org/wiki/Talk.*&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s">&quot;https://en\.wikipedia\.org/wiki/Portal.*&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s">&quot;https://en\.wikipedia\.org/wiki/Special.*&quot;</span>
</span><span class='line'>                        <span class="p">]),</span>
</span><span class='line'>            <span class="n">callback</span><span class="o">=</span><span class="s">&#39;parse_wikipedia_page&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which leads to some the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Free_content
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/List_of_largest_volcanic_eruptions
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/List_of_official_County_Championship_winners
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Manchester_Square
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Wikimedia_Foundation
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Deportation_of_Armenian_intellectuals_on_24_April_1915
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/George_Cruikshank
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Morning_Herald
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Ferdinand_VII_of_Spain
</span><span class='line'>Found a page
</span><span class='line'>https://en.wikipedia.org/wiki/Morning_Chronicle
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we can begin parsing the page with response and response.body.
We do this primarily with Beautiful Soup, and by simply finding tags on the page.
It&rsquo;s easiest to scrape website which uses ids.</p>

<p>Here&rsquo;s my scraping code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">parse_wikipedia_page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">item</span> <span class="o">=</span> <span class="n">WikipediaItem</span><span class="p">()</span>
</span><span class='line'>    <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;h1&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="s">&quot;firstHeading&quot;</span><span class="p">})</span><span class="o">.</span><span class="n">string</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">description</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;div&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s">&quot;id&quot;</span><span class="p">:</span> <span class="s">&quot;mw-content-text&quot;</span><span class="p">})</span>
</span><span class='line'>    <span class="c"># get the first tag</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">=</span> <span class="n">string_from_listing</span><span class="p">(</span><span class="n">description</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;p&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;description&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">description</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the function <code>string_from_listing</code> is a function I wrote that enumerates through the Beautiful Soup 4 strings and condenses strings in the listing. This is needed in the case where the body of the description contains links, which are parsed as tags in Beautiful Soup.</p>

<p>We can get the output in JSON format with the following call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scrapy crawl wikipedia_pages -o out.json
</span></code></pre></td></tr></table></div></figure>


<p>And the JSON looks a little like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://en.wikipedia.org/wiki/Free_content&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Free content&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Free content, libre content, or free information, is any kind of functional work, artwork, or other creative content that meets the definition of a free cultural work. A free cultural work is one which has no significant legal restriction on people&#39;s freedom:&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://en.wikipedia.org/wiki/List_of_largest_volcanic_eruptions&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;List of largest volcanic eruptions&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;In a volcanic eruption, lava, tephra (volcanic bombs, lapilli, and ash), and various gases are expelled from a volcanic vent or fissure. While many eruptions only pose dangers to the immediately surrounding area, Earth&#39;s largest eruptions can have a major regional or even global impact, with some affecting the climate and contributing to mass extinctions.[1][2] Volcanic eruptions can generally be characterized as either explosive eruptions, sudden ejections of rock and ash, or effusive eruptions, relatively gentle outpourings of lava.[3] A separate list is given below for each type.&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://en.wikipedia.org/wiki/List_of_official_County_Championship_winners&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;List of official County Championship winners&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;The County Championship is an annual first-class cricket league competition for county cricket clubs in England and Wales. The league is contested on a round-robin basis and the championship awarded to the team that is top of the league at the end of the season. Yorkshire County Cricket Club are the current champions, claiming their thirty first title in the 2014 season.&quot;</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the inclusion of unicode, as escaped sequences as well. As for more features of Scrapy, you could pipeline the process, filter out duplicate links for example, and multithread Scrapy as well, although I won&rsquo;t be covering that for this tutorial.</p>

<p>Hope you enjoyed!
- pybae</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crafting Minecraft]]></title>
    <link href="http://pybae.github.io/blog/2015/04/22/crafting-minecraft/"/>
    <updated>2015-04-22T15:38:52-05:00</updated>
    <id>http://pybae.github.io/blog/2015/04/22/crafting-minecraft</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p><img src="http://i.imgur.com/RhbniNM.jpg" alt="Minecraft FA 310" /></p>

<p>Minecraft is a popular indie game developed by Mojang [1], that has the following premise: build something. Well, not exactly, but the game is known to have inspired a large variety of creative work, similar to the one above. A couple examples are as follows:</p>

<p><img src="http://rack.0.mshcdn.com/media/ZgkyMDEzLzAyLzA4L2NjL2FuY2llbnRtZXRyLjIzYmU5LmpwZwpwCXRodW1iCTg1MHg4NTA-CmUJanBn/f7574d0c/f85/ancient-metropolis.jpg" alt="Ancient metropolis" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/originals/9b/ef/6c/9bef6ccf510d60444cb043619421d713.jpg" alt="Pinterest example" /></p>

<p><img src="http://static3.businessinsider.com/image/537b99b16bb3f7913c6473d0-1200/minecraft-golden-city.png" alt="Golden city" /></p>

<p>Furthermore, players aren&rsquo;t limited to just creating structures within the game. People have made <a href="https://www.youtube.com/user/CaptainSparklez">animation</a>, <a href="https://www.pinterest.com/explore/minecraft-fan-art/">fanart</a>, and <a href="http://www.minecrafttexturepacks.com/">texture packs</a>, which gives the game an entirely new aesthetic.</p>

<p>With such a broad range of possibilities, Minecraft has been often analyzed through the lens of formalism. Does this game conform to the standards of what we define as a video game? Can it be considered a game at all? If so, what category or genre does it classify as? These questions have been asked frequently by not only scholars but also by gamers alike. It isn&rsquo;t rare to find someone decrying Minecraft for not being a &ldquo;true&rdquo; game, while touting the merits of Call of Duty per se. One work that I find particularly helpful in the creation of this post is The Craft of Data Mining [2], which explores the innate constraints set on the game. This analysis, however, is not one of formalism. Instead, I explore the technical aspects of Minecraft and modding culture through the lens of reader-response theory, and attempt to define the game in terms of its mechanics.</p>

<h3>Mechanics</h3>

<p>From a gameplay perspective, Minecraft has two main player modes: survival and creative. Survival introduces the notion of a health bar and a hunger bar, and forces the user to forge for their own survival. You can craft with a 3x3 grid based system and form complex materials and weapons by doing so, similar to some RPGs. Creative removes all of these restrictions and simply enables the user to build, explore, or destroy the world.
As mentioned before, the game tends to be pretty open-ended. However, it is possible to &ldquo;beat&rdquo; the game in survival mode by going to the END and slaying the Ender Dragon. Ironically enough, once you clear the game, you are respawned as if nothing happened [3].</p>

<p>More interestingly, the creators of Minecraft, Mojang, have been proactive in encouraging users to mod, or modify, the game. These mods could range from <a href="http://www.minecraftmods.com/chococraft/">introducing Chocobos from Final Fantasy</a> to <a href="http://www.minecraftmods.com/toomanyitems/">extending and simplifying the HUD</a>. How one could create such a mod would involve using a modding API, such as Minecraft Forge [4]. An API stands for Application Programmer Interface, which is essentially a set of tools to build an application with. In the case of Minecraft, an API could expose such methods as creating a block or equipping an item.</p>

<p>Now where Minecraft begins to differ from most other games is the extent to which the API is exposed. For example, take a SNES game. One could modify the textures, animations, and even maybe the display of the game, but it would be very difficult to go beyond that. Even more lenient games, such as Skyrim, still restrict which code is publicly accessible. In contrast, Minecraft has nearly no restrictions. One can modify anything from the HUD to the very mechanics of the game, as this one mod did with <a href="http://qcraft.org/about/">quantum physics</a>. To understand why, we have to delve into the internals of the Minecraft application.</p>

<p>Minecraft is shipped as a jar file. Jar stands for Java Archive, similar to a .zip file as well. This file contains the entirety of Minecraft. The file is responsible for user validation, networking, terrain generation, graphics display, chat, and more. Mods work by modifying this Jar file, such as adding and rewriting sections of the source code. There&rsquo;s a clear security issue, however, in that any user could access the entirety of your source code by simply unzipping this archive. Minecraft, and other enterprise applications, gets around that by obfuscating the source code. So for example, the word &ldquo;World&rdquo; would be translated to &ldquo;2ja10&rdquo;.</p>

<p>Gamers tend to be pretty persistent, however, and soon enough they were able to deduce a schematic for the obfuscation. From there, they were able to extend and modify the game. A guide on how to install a mod can be found <a href="http://minecraft.gamepedia.com/Mods/Installing_mods#How_to_Install_Mods">here</a>.</p>

<p>Now, with modding APIs such <a href="https://www.spongepowered.org/">Minecraft Sponge</a>, a new API that attempts to combine both server side and client side modifications, enabling users to modify nearly anything, we are faced with the following question. Where do we draw the boundary between a modification of Minecraft and a new game entirely?</p>

<p>Furthermore, Minecraft inspired a variety of clones, such as Terraria and <a href="https://www.kickstarter.com/projects/1247991467/planets3">Planets3</a>. Developers all across the world have implemented Minecraft in <a href="http://www.minetest.net/">C++</a>, <a href="https://mcpipy.wordpress.com/">Python</a>, and even <a href="https://github.com/nandor/hcraft">Haskell</a>. These clones are just as fleshed out, if not better, than Minecraft. What is the difference between Minecraft and these games as well? Can they be considered as the same game?</p>

<h3>Argument</h3>

<p>My argument is that the defining aspects of a game are found in not only its mechanics, but also in its concept. In other words, a game must be considered in terms of its concepts primarily. The mechanics of a game is simply an implementation of the concept. Take Call of Duty as an example. The game&rsquo;s concept is quite simple and naive. Nearly anyone could come up with it. Yet, it&rsquo;s implementation was great, involving years of development. Call of Duty is a case of a game where it relies more heavily on the implementation rather than the concept. Minecraft would be the opposite.</p>

<p>To answer the questions I&rsquo;ve stated above, I believe that the clones of Minecraft can be regarded as the same game. Of course it would be difficult in the case of drastic changes, such as Terraria to Minecraft. What classifies a mod of a game as distinct from the game itself is when the concepts between the two have diverged distinctly. Take Team Fortress 2, a game that originated from a Quake mod, as an example. Originally, Team Fortress Classic, simply added the notion of classes to Quake. Team Fortress 2 extended that concept into maps of play, where new play styles, strategies, and art has been created, resulting in a distinct concept from Quake.</p>

<p>In conclusion, Minecraft has encouraged a healthy population of mods and artistic work. The open-endedness of the game is one of the defining aspects of the game and I believe that there is no &ldquo;right&rdquo; way to play Minecraft. However, I do believe there is a distinction between the modding Minecraft and creating a separate game entirely. Hopefully this argument will be of use to anyone who wishes to mod the game as well.</p>

<h3>Citations</h3>

<ol>
<li><a href="https://minecraft.net/">https://minecraft.net/</a></li>
<li>The Craft of Data Mining, Minecraft and the Constraints of Play - Tremblay, Colangelo, and Brown</li>
<li><a href="http://minecraft.gamepedia.com/The_End">http://minecraft.gamepedia.com/The_End</a></li>
<li><a href="http://files.minecraftforge.net/">http://files.minecraftforge.net/</a></li>
</ol>


<p>Regarding the images used throughout the post,
besides those I&rsquo;ve created personally, all of the images in the post can be found in the page document in my Github to the left.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masters of Doom]]></title>
    <link href="http://pybae.github.io/blog/2015/03/05/masters-of-doom/"/>
    <updated>2015-03-05T04:13:14-06:00</updated>
    <id>http://pybae.github.io/blog/2015/03/05/masters-of-doom</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>&ldquo;Masters of Doom&rdquo; was written by David Kushner in the course of six years. In these six years, he conducted hundreds of interviews [1], attended various Doom and Quake tournaments, and launched a Hydrogen Peroxide powered rocket with John Carmack [2]. The result was beyond belief. The book reached completion in 2003 and was published by Random House. &ldquo;Masters of Doom&rdquo; chronicles the tales of the &ldquo;Two Johns&rdquo;, John Romero and John Carmack, their company id Software, and their eventual dispersion.</p>

<h3>Summary</h3>

<p>Kushner adopts a novel-like narrative throughout the book and begins by introducing the two main characters: the &ldquo;Two Johns.&rdquo; John Romero was born in Colorado Springs in 1967 [3]. His father quickly left the family, however, and he was mainly raised by his stepfather, John Schuneman. Schuneman was a former drill sergeant and held one immutable belief: &ldquo;No video games.&rdquo; Romero didn&rsquo;t heed the warning, however. He continued his escapades to the arcade relentlessly [4]. As time passed, Romero grew more and more in love with video games. He acquired an Apple II and quickly learned how to create programs [5]. He also expressed his rebellious side: hooking up with numerous girlfriends and creating carnage-filled comics.</p>

<p>Meanwhile, in Roeland Park, Kansas, John Carmack was growing as well. John Carmack was born into an upper-class family, his father being a famous news anchor and his mother being an esteemed scientist [6]. His earlier years were filled with constant study. His efforts paid off, as he was placed in a 9th grade proficiency level when he was only seven [7]. His life took a turn when he was introduced to the field of computing. Carmack quickly found solace in creating and playing games. He was caught breaking into the school&rsquo;s lab one night and then sent to juvy [8]. When he returned, he was hardened and burning to hack.</p>

<p>Eventually, the two met at Softdisk, where they established the Gaming department [9]. Along with new friends and old companions, they founded id Software. At id Software, they would create legends for years to come: Dangerous Dave in Copyright Infringement, Commander Keen, Doom, and Quake [10]. With every release, they broke the industry. This group of skinny twenty-somethings were on the rise to fame and riches.</p>

<p>With the release of Quake, however, problems began to surface. Romero was becoming distracted. With gamers bowing down to Romero and exclaiming &ldquo;We are not worthy. We are not worthy,&rdquo; Romero lost focus in creating games and became more interested in playing them [11]. Eventually, Carmack was forced to fire Romero, leaving him to create his own company Ion Storm [12]. The motto of Ion Storm was &ldquo;Design is Law&rdquo;, the idea that technology should support design, rather than the other way around [13]. Ion Storm&rsquo;s office was as great as its motto. A penthouse furnished with balloons, Las Vegas slot machines, Sledgehammers, and games abound [14]. However, Ion Storm eventually collapsed due to its lack of proper management.</p>

<p>Carmack continued to lead id Software to success. He released Quake 3 with his new and improved graphics engine and continued to do so. His final work at id Software was Rage, which also achieved widespread critical acclaim [15]. After completing Rage, Carmack and id Software had a graceful descent. As of now, Carmack is the Chief Technological Officer of Oculus VR [16].</p>

<h3>Impressions</h3>

<p>I was constantly impressed by &ldquo;Masters of Doom.&rdquo; With each chapter, I found myself inspired and wishing to read more. Rather than a history book, &ldquo;Masters of Doom&rdquo; was closer to a Greek epic. I sympathized with both the main characters. I felt anxious when id Software was being sued. I felt triumphant when they succeeded.</p>

<p>To be frank, I was expecting a rather drab piece. Yet, I was simply blown away by the quality of the book as well  as its story. David Kushner&rsquo;s writing style is quite unique. Compared to most non-fiction works, he employed the third-person narrative quite frequently. There was a sense of action, similar to those in Blockbuster movies, throughout the entire piece.</p>

<p>His phrasing is curious as well. It is casual, frequently using disparaging terms. Kushner doesn&rsquo;t shy away from the darker corners of Hacker Culture. Yet, he takes care to explain each concept thoroughly, which might be confusing for most readers. In this way, he maintains the unique style of the book while appealing to a broader audience.</p>

<p>The purpose of &ldquo;Masters of Doom&rdquo; isn&rsquo;t to enlighten its readers in the field of Game History. It is to shed light on the complex dynamics of id Software and the stories behind its leading two egos. Rather than appealing to only video game enthusiasts, &ldquo;Masters of Doom&rdquo; is a fascinating tale for anyone to read. The book does appeal to gamers foremost, however. It&rsquo;s unlikely that an average reader, without knowing what Doom or who John Carmack is, would pick up this book off the shelf. John Romero and John Carmack are giants in the field of video games, but little known else where.</p>

<p>In contrast to most game history texts, the book is more focused on the creators rather than the games themselves. Although &ldquo;Masters of Doom&rdquo; goes into detail regarding the creation of the games themselves, it&rsquo;s clear that the true focus of the book was the &ldquo;Two Johns.&rdquo; I find this to be a welcome surprise, however. The story behind id  Software is truly intriguing and I&rsquo;m glad that Kushner decided to write this piece. I think David Kushner held little motive other than pure interest when writing the book. It&rsquo;s not easy to work continuously on a book, interviewing hundreds and compiling notes. Furthermore, Random House tends to be lenient towards content and we can see that in &ldquo;Masters of Doom.&rdquo; A more traditional publisher might have chosen to censor some portions of the book, yet they are there quite clearly in &ldquo;Masters of Doom.&rdquo;</p>

<p>Personally, I learned much from &ldquo;Masters of Doom&rdquo; about video games, business, and friendship. I&rsquo;ve always wondered what the key to success was. Was Bill Gates and Steve Jobs more talented than I was, or were they simply lucky? The question harassed me daily. Yet, I think I found the answer: to simply work. There&rsquo;s little to be gained by wondering about the future ahead of me. Rather than do so, I wish to look at the world in front of me and live. As Carmack said, &ldquo;If you want to set off and go develop some grand new thing, you don&rsquo;t need millions of dollars of capitalization. You need enough pizza and Diet Coke to stick in your refrigerator, a cheap PC to work on, and the dedication to go through with it. We slept on floors. We waded across rivers.&rdquo;</p>

<h3>Citations</h3>

<ol>
<li>Page 309 in Masters of Doom</li>
<li>Page 288 in Masters of Doom</li>
<li>Page 4 in Masters of Doom</li>
<li>Page 5 in Masters of Doom</li>
<li>Page 12 in Masters of Doom</li>
<li>Page 18 in Masters of Doom</li>
<li>Page 19 in Masters of Doom</li>
<li>Page 23 in Masters of Doom</li>
<li>Page 37 in Masters of Doom</li>
<li>Most of Masters of Doom</li>
<li>Page 172 in Masters of Doom</li>
<li>Page 220 in Masters of Doom</li>
<li>Page 230 in Masters of Doom</li>
<li>Page 229 in Masters of Doom</li>
<li>Metacritic - <a href="http://www.metacritic.com/game/pc/rage">http://www.metacritic.com/game/pc/rage</a></li>
<li>Oculus Blog - <a href="https://www.oculus.com/blog/john-carmack-joins-oculus-as-cto/">https://www.oculus.com/blog/john-carmack-joins-oculus-as-cto/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 4: Tricky Generators]]></title>
    <link href="http://pybae.github.io/blog/2015/02/15/week-4-tricky-generators/"/>
    <updated>2015-02-15T14:52:14-06:00</updated>
    <id>http://pybae.github.io/blog/2015/02/15/week-4-tricky-generators</id>
    <content type="html"><![CDATA[<p>This week, we continued our adventure into functional programming and talked
about an interesting feature of Python: Generators.
Generators are functions that behave as iterators, thus enabling them to be used
in loops. A prime example of this would be in Haskell, where everything is a
generator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fibs</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Integer</span><span class="p">]</span>
</span><span class='line'><span class="nf">fibs</span> <span class="ow">=</span> <span class="mi">1</span><span class="kt">:</span><span class="mi">1</span><span class="kt">:</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">fibs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">fibs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada! A lazily-evaluated infinite list. If we were to do something similar in Python, we would get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">lazy_fibb</span><span class="p">():</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">a</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefits of Python&rsquo;s approach is no doubt it&rsquo;s readability.
We can easily see the mechanics of the function and the result it gives.
In comparison to more rigid functional languages, which normally require experience and time to understand, Python&rsquo;s generators are quite elegant.</p>

<p>On a side note, Professor Downing gave us the first trick question of the semester.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span><span class="p">(</span><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>What would the above print?
Well, although I held doubts about the syntax, I put down the expected answer of the integers from 0 to 99.
Yet, I was dismayed to find out that the answer was &ldquo;generator 0x1abc0ed&rdquo;</p>

<p>I suppose it&rsquo;s a good wake up call to pay more attention to the specifics of the code.
I tend to avoid being picky with syntax, instead trying to infer the general logic behind the code.
Yet, certain cases do call for it and it seems like I need to pay closer attention.</p>

<p>A close friend of mine partnered up with me to do the Netflix assignment and he was intrigued by IPython.
IPython is a shell, similar to what python does when invoked with no arguments, and offers a plethora of benefits.
One of my favorite features is the timeit &ldquo;magic&rdquo; call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="o">%</span><span class="n">timeit</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="o">%</span><span class="n">timeit</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">operator</span><span class="o">.</span><span class="n">add</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>other features include auto-completion, bash commands (ls and cd), integration with pdb, automatically inserted parentheses, and a variety of &ldquo;magic&rdquo; functions.
I&rsquo;d recommend giving it a shot.</p>

<p>Thanks for reading,
Paul</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 3: Collatz Redux and Functional Programming]]></title>
    <link href="http://pybae.github.io/blog/2015/02/07/week-3-collatz-redux-and-functional-programming/"/>
    <updated>2015-02-07T19:12:59-06:00</updated>
    <id>http://pybae.github.io/blog/2015/02/07/week-3-collatz-redux-and-functional-programming</id>
    <content type="html"><![CDATA[<p>The Collatz assignment was due this week, and much to my dismay, I don&rsquo;t think I
did too well. The main problem was in <a href="http://www.spoj.com/problems/PROBTRES/">V2</a>, the extra credit option available to
us.</p>

<p>This new version had the same specifications as the <a href="http://www.spoj.com/problems/PROBTNPO/">original question</a>,
but had differing input. The two differences with this version are:</p>

<ol>
<li><p>Input contains empty newlines.
Professor Downing gave us the framework for the code, and input/output was
included in this framework. The only thing we needed to implement was a method
of the following definition: <code>def collatz_eval(x, y)</code>
So, when receiving numerous runtime errors on Sphere, it didn&rsquo;t occur to me to
fix the input function. I was rather narrow-minded in my debugging and I
wasn&rsquo;t able to find the bug in the end. I&rsquo;m humbled from the experience and
determined to not err the same way again.</p></li>
<li><p>Output can overflow a 32-bit unsigned int and the result should be overflowed
I managed to figure this one out by successfully writing code that lead to
correct results in C++. The solution was rather simple: bit anding with the
max 32-bit value every iteration.</p></li>
</ol>


<p>In total, I&rsquo;m disapppointed in myself for this project. I admit I was arrogant
coming into it and failed to properly consider the requirements at hand. I
learned a valuable lesson from this project and it is one that I hope to never
forget.</p>

<p>Moving forward, the lectures for this week were among the most interesting so
far. We covered my favorite topic in Python: functional programming!</p>

<p>Functional programming offers many benefits, conciseness, ease of development,
and reliability. One that I was surprised to find in Python was the increased
speed. I tested this in IPython with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;string&quot;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">1000</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="o">%</span><span class="n">timeit</span> <span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">upper</span><span class="p">,</span> <span class="n">words</span><span class="p">)</span>
</span><span class='line'><span class="c"># 1000000 loops, best of 3: 265 ns per loop</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="o">%</span><span class="n">timeit</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">words</span><span class="p">]</span>
</span><span class='line'><span class="c"># 10000 loops, best of 3: 128 µs per loop</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s nearly a thousand times speedup. The main reason being that map pushed a
for loop from the interpreter into C code, thus speeding up the disassembly.
However, it&rsquo;s not significant in real-world code and list compehrensions are
much more common in use.  <a href="http://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map">This</a>
is a really good post about the differences between the two.</p>

<p>Regardless of speed, however, functional programming does offer many benefits.<br/>
It&rsquo;s a different way to approach problems and it enables for clever and
beautiful solutions. Without a doubt, functional programming is a useful tool
for any programmer and I&rsquo;m ecstatic to see what Python will offer.</p>

<p>Thanks for reading,
Paul</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 2: Emacs and Collatz]]></title>
    <link href="http://pybae.github.io/blog/2015/02/01/week-2-emacs-and-collatz/"/>
    <updated>2015-02-01T16:10:31-06:00</updated>
    <id>http://pybae.github.io/blog/2015/02/01/week-2-emacs-and-collatz</id>
    <content type="html"><![CDATA[<p>We are now in our second week of class and have been given the first assignment: Collatz.
The assignment is to write a program that finds the maximum cycle length of a range specified by user input.
After finishing, we are expected to submit our assignments to <a href="http://www.spoj.com/problems/PROBTNPO/">SPOJ</a>
As mentioned before, I&rsquo;ve already taken one of Downing&rsquo;s classes, Object Oriented Programming.
Luckily, the first assignment is the same, albeit with some differences.
As such, I finished this assignment quite quickly.
The lectures were familiar to me as well. He used the same examples, same code, and even the same jokes.
As such, I found myself bored with most of the material. Rather than succumbing to apathy, however, I greeted an old friend of mine: Emacs.</p>

<p>I first met Emacs nearly three years ago.
At that time, I was a Vim enthusiast.
My setup included dozens of plugins, ranging from <a href="http://eclim.org/">eclim</a> to <a href="https://github.com/godlygeek/tabular">Tabular</a>.
I was an avid <a href="http://www.vimgolf.com/">Vim Golfer</a> and sported a complex workflow involving sending Vim text objects to Tmux sessions.
I demanded that my entire system used Vim bindings, installing <a href="http://www.vimperator.org/vimperator">Vimperator</a> and rebinding GMail keystrokes.
At that time, I believed that Vim was superior to other editors.
I would sneer at the other Freshman using Sublime and TextMate while I wrote obstruse regex.
However, after seeing Matz, the creator of Ruby, give a talk about his experience with Emacs I was inspired to do the same.</p>

<p>For the next few weeks, my pinky was aching from overuse.
Initially, I struggled with Emacs, often cursing it&rsquo;s default bindings.
Everytime I installed a new plugin, I was forced to learn a myriad of new commands.
C-c M-p f, C-M-p f, C-p M-c f. My fingers became adept at acrobatics.
Furthermore, these bindings are dynamic.
Depending on the modes of the buffer, which are sourced from file name and type, these bindings could have an entirely different meaning.</p>

<p>Yet, I continued to use Emacs. The reason being Lisp.
Vim is configured through its own language, Vimscript.
Vimscript is renowned for its various misgivings.
For example,</p>

<figure class='code'><figcaption><span>Whitespace at the end</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> Z zz
</span><span class='line'><span class="nb">nnoremap</span> Z zz
</span></code></pre></td></tr></table></div></figure>


<p>See the difference between the two lines?
It&rsquo;s a single whitespace at the end.
Vimscript treats everything as a string, and as such, whitespace is significant.
The difference between the two can be disastrous at times.
This is only one of the many hacks Vimscript contains.</p>

<p>Emacs, on the other hand, uses Emacs Lisp.
Although Lisp was frightening at first with its mountains of parentheses, I came to slowly appreciate the design and elegance of the language.
Emacs is often joked about being an OS rather than a text editor, and to a degree, I think that statement&rsquo;s true.
Emacs has proper asynchronous operations and has a myriad of plugins, including a web browser, email and even tetris.
Users can rewrite nearly any aspect of the editor fluidly and consistently.
As such, the plugins that have emerged are simply amazing.</p>

<p>Evil is a near complete emulation of Vim keybindings.
Magit is a unique interface to git that is worthy of being its own application.
Flycheck is a robust syntax checker that runs quickly in the background without any delay.
Jedi is an interface to the Python Jedi server that offers code completion on par with fully-featured IDEs.</p>

<p>Now, I think it&rsquo;s unfeasible to drop emacs for any other editor.
If some new IDE offers a unique feature, it&rsquo;s likely that someone will make a similar plugin for emacs in a matter of months.
If a certain aspect of the GUI bugs me, I can customize it as I wish or even delete it entirely.
I&rsquo;ve been with emacs for three years now.
Along the way, I&rsquo;ve written thousands of lines, learned new langauges, and became faster at programming.
As I&rsquo;ve changed, emacs has changed with me as well.
More than an editor, it&rsquo;s a lifetime partner.</p>

<p><img src="http://i.imgur.com/J3lui9F.png"></p>

<p>Thanks for reading,
Paul</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 1: Greetings]]></title>
    <link href="http://pybae.github.io/blog/2015/01/25/week-1-greetings/"/>
    <updated>2015-01-25T20:51:49-06:00</updated>
    <id>http://pybae.github.io/blog/2015/01/25/week-1-greetings</id>
    <content type="html"><![CDATA[<p>Hello!
This is my blog for the Software Engineering <a href="https://www.cs.utexas.edu/users/downing/cs371p/">class</a> at UT Austin.
To clarify the ambiguous title, the class is revolved around Python.
The project for the class will be to build a sizable website using Django, MySQL, and others.
The main goal of the class, however, is to distill good software engineering practices into the students.</p>

<p>I think that&rsquo;s quite a unique ambition.
Most traditional Computer Science courses tend to teach concepts deeply rooted in history.
Operating Systems, Theory of Computation, Computer Graphics.
These courses are considered essential to Computer Science and I&rsquo;ve taken, and enjoyed, many of them.
In modern days, however, the need for these courses are slowly diminishing.
It&rsquo;s hard to walk even a few feet in a Career Fair before being assaulted by buzzwords such as Node.js, Ruby On Rails, Angular, and Bootstrap.
Furthermore, it is rare to find recruiters asking about experience in compilers or operating systems.</p>

<p>By no means, however, am I dissuading anyone from learning about these new technologies.
In fact, I enjoy them thoroughly. When I first learned of Ruby, I tried to do
nearly everything in Ruby, from Competitive Programming to <a href="https://github.com/jashkenas/ruby-processing">Graphics</a>.
I take pleasure in learning obscure programming languages, such as APL.
I&rsquo;ve tried Lisp, Haskell, Scala, Smalltalk, D, and Rust among dozens of others.
I browse /r/programming and Hacker News habitually, constantly looking for new and promising frameworks.
Throughout these endeavors, I never seek to &ldquo;master&rdquo; a language or a framework.
Rather, I simply enjoy trying alternatives to the methods I already use and trust.</p>

<p>Anyways, back on topic.
The professor teaching the class, <a href="https://www.cs.utexas.edu/users/downing/">Glenn Downing</a>, is a bit of a celebrity amongst my group of friends.
Last semester, we all took Object Oriented Programming, another class taught by Downing, and enjoyed it thoroughly.
By the end of the term, we were all fervent fans of Professor Downing, calling him the Master of C++.
Downing has a bit of a unique teaching style, which encourages active learning.
He forbids skipping class and calls on students in class to ensure that we&rsquo;re alert.
Although it was a bit jarring at first, his teaching style is among the best I&rsquo;ve seen so far.</p>

<p>The material he teaches is unique, as mentioned before. Other universities
rarely have an &ldquo;Object Oriented Programming&rdquo; course, and if they do, it&rsquo;s likely
to be filled with tiresome terminology and outdated concepts.
His courses are no doubt modern in design.
They embrace topics that are useful in day-to-day development and strive to keep up with current frameworks.
However, they are also unadorned.
They focus on the heart of the material, rather than being concerned with detail.
For these reasons, I recommend anyone interested in Software Development to take a Downing course. The experiences gained are indispensable.</p>

<p>It&rsquo;s been a while since I&rsquo;ve written something substantial, and as such, it&rsquo;s a little awkward to pick up the pen again.
Yet, I&rsquo;m looking forward to it.
I hope that you will be entertained with my clumsy thoughts and perhaps benefit from them as well.</p>

<p>Sincerely,
Paul</p>
]]></content>
  </entry>
  
</feed>
